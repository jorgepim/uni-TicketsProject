@model List<TicketsApp.Models.Notificacion>


<style>
    .modal-content {
        background-color: rgba(255, 255, 255, 0.95);
        border-radius: 15px;
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
        border: none;
    }

    .modal-header {
        background-color: rgba(73, 107, 158, 0.5); /* #496b9e con 50% opacidad */
        border-top-left-radius: 15px;
        border-top-right-radius: 15px;
    }

    .modal-title {
        font-weight: bold;
        font-size: 1.1rem;
    }

    .list-group-item {
        background-color: #fef4ea;
        border: none;
        border-radius: 10px;
        margin-bottom: 0.5rem;
    }

        .list-group-item .btn {
            font-size: 0.85rem;
            padding: 4px 10px;
        }

        .list-group-item .fw-bold {
            color: #3b5b8d;
        }

    .text-muted {
        font-size: 0.8rem;
    }

    .modal-body {
        max-height: 400px;
        overflow-y: auto;
        padding: 1rem;
    }
</style>


@functions {
    public string ObtenerTiempoTranscurrido(DateTime? fecha)
    {
        if (fecha == null) return "hace un momento";
        var diferencia = DateTime.Now - fecha.Value;
        if (diferencia.TotalMinutes < 1)
            return "hace unos segundos";
        if (diferencia.TotalMinutes < 60)
            return $"hace {(int)diferencia.TotalMinutes} minuto(s)";
        if (diferencia.TotalHours < 24)
            return $"hace {(int)diferencia.TotalHours} hora(s)";
        if (diferencia.TotalDays < 30)
            return $"hace {(int)diferencia.TotalDays} día(s)";
        return fecha.Value.ToString("dd/MM/yyyy");
    }

    public (string Icono, string Color) ObtenerIconoYColor(string mensaje)
    {
        if (mensaje.ToLower().Contains("creado") || mensaje.ToLower().Contains("nuevo"))
            return ("fa-plus-circle", "text-success");
        if (mensaje.ToLower().Contains("respondido") || mensaje.ToLower().Contains("regresado"))
            return ("fa-undo-alt", "text-warning");
        return ("fa-info-circle", "text-primary");
    }
}

@if (!Model.Any())
{
    <div class="text-muted text-center">No tienes notificaciones nuevas.</div>
}
else
{
    <ul class="list-group list-group-flush">
        @foreach (var n in Model)
        {
            var iconoColor = ObtenerIconoYColor(n.Mensaje ?? "");
            <li class="list-group-item d-flex justify-content-between align-items-start">
                <div class="d-flex align-items-start gap-2">
                    <i class="fas @iconoColor.Icono @iconoColor.Color mt-1"></i>
                    <div class="me-auto">
                        <div class="fw-bold">@n.Mensaje</div>
                        <small class="text-muted">@ObtenerTiempoTranscurrido(n.FechaEnvio)</small>
                    </div>
                </div>
                <a class="btn btn-sm btn-outline-primary"
                   asp-controller="Cliente"
                   asp-action="Detalles"
                   asp-route-id="@n.TicketId">
                    Ver
                </a>
            </li>
        }
    </ul>
}
